import { app, BrowserWindow, Menu, nativeImage, Tray, shell, net, ipcMain } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string; // メインウィンドウ
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string; // メインウィンドウ プリロード
declare const AI_WINDOW_WEBPACK_ENTRY: string; // AI設定ウィンドウ
declare const AI_WINDOW_PRELOAD_WEBPACK_ENTRY: string; // AI設定ウィンドウ プリロード
declare const ALERM_WINDOW_WEBPACK_ENTRY: string; // アラーム設定ウィンドウ
declare const ALERM_WINDOW_PRELOAD_WEBPACK_ENTRY: string; // アラーム設定ウィンドウ プリロード
// import iconPath from './aka.ico';


// import { execSync } from 'child_process';
import iconv from 'iconv-lite';
import { dialog } from 'electron/main';

// // Handle creating/removing shortcuts on Windows when installing/uninstalling.
// if (require('electron-squirrel-startup')) {
//   app.quit();
// }

  // const stdout = execSync('dir')
  // console.log(`${iconv.decode(stdout,"Shift_JIS")}`)
  // console.log(`${iconv.decode(stdout,"utf-8")}`)
  // const crystal = execSync('c:\\Program^ Files\\CrystalDiskInfo\\DiskInfo64.exe \/CopyExit')
  // console.log(`${iconv.decode(crystal,"Shift_JIS")}`)


// const createMainWindow = (): void => {
//   const stdout = execSync('dir')
//   console.log(`${iconv.decode(stdout,"Shift_JIS")}`)
//   console.log(`${iconv.decode(stdout,"utf-8")}`)
//   // const crystal = execSync('c:\\Program^ Files\\CrystalDiskInfo\\DiskInfo64.exe \/CopyExit')
//   // console.log(`${iconv.decode(crystal,"Shift_JIS")}`)

//   // and load the index.html of the app.
//   mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

//   // Open the DevTools.
//   mainWindow.webContents.openDevTools();
// };

// // This method will be called when Electron has finished
// // initialization and is ready to create browser windows.
// // Some APIs can only be used after this event occurs.
// app.on('ready', createMainWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
// app.on('window-all-closed', () => {
//   if (process.platform !== 'darwin') {
//     app.quit();
//   }
// });

// app.on('activate', () => {
//   // On OS X it's common to re-create a window in the app when the
//   // dock icon is clicked and there are no other windows open.
//   if (BrowserWindow.getAllWindows().length === 0) {
//   }
// });
// // In this file you can include the rest of your app's specific main process
// // code. You can also put them in separate files and import them here.

let mainWindow: BrowserWindow;
let request;
let tmp: Buffer;

app.whenReady().then(() => {
  createMainWindow() // 設定ウィンドウを生成（hidden）

  // console.log(iconPath)
  // const img = nativeImage.createFromPath(iconPath) // アイコン読み込み TODO
  const img = nativeImage.createFromPath('aka.ico') // アイコン読み込み TODO
  const tray = new Tray(img)

  const contextMenu = Menu.buildFromTemplate([
    { label: 'kopilotについて', role: 'about' }, // 使い方説明としてgithubリンクも欲しい、もしくはhtml説明書
    { label: '設定', click: () => { mainWindow.show() } }, // 設定画面
    { label: 'リロード', click: () => { mainWindow.show() } }, // TODO
    { label: '終了', click: () => { app.exit() } }, // アプリケーションを完全終了
  ])
  tray.setToolTip('kopilot') // タスクバー上でホバーした時の説明
  tray.setContextMenu(contextMenu)

  ipcMain.handle('ping', () => 'pong')
})

// このアプリについて
app.setAboutPanelOptions({
  applicationName: 'kopilot',                // アプリ名
  applicationVersion: 'v1.0.0',              // アプリのバージョン
  // copyright: 'Copyright (C) 2020 M.Katsube', // コピーライト
  credits: 'made by ayataka',           // クレジット (Windows,macOS用)
  // iconPath: 'asset/image/icon.png'           // アイコン画像 (Linux,Windows用)
});

// メインウィンドウ
const createMainWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 900,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    show: false, // 起動時は隠した状態でウィンドウを作成
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.on('close', (event) => {
    event.preventDefault(); // submitイベントの本来の動作を止める。closeの動作を止める
    mainWindow.hide(); // バツボタンを押したときに設定ウィンドウを隠す
  });

  const windowMenu = Menu.buildFromTemplate([
    { label: 'ファイル',
      submenu: [
        { label: 'フォルダを開く', click: () => {
            shell.openPath('C:\\Users\\kasum\\MyProjects\\gpt4o\\kopilot\\ts_webpack_electron');//exeのある場所を開く
            }
        },
        { label: 'AI設定', click: () => { createAiWindow() } },
        { label: '終了', click: () => { app.exit() } },
      ]
    },
    { label: '編集',
      submenu: [
        { label: 'アラームを追加', click: () => { createAlermWindow() } },
      ]
    },
    { label: 'ヘルプ',
      submenu: [
        { label: 'このアプリについて', role: 'about' },
        { label: 'webサイト', click: () => { shell.openExternal('https://github.com/a-yataka/kopilot') } },
      ]
    },
    {
      // label: 'aaaa', click: () =>{ mainWindow.webContents.send('control', 'play');}
      label: 'aaaa', click: () =>{play("C:\\Users\\kasum\\MyProjects\\gpt4o\\kopilot\\ts_webpack_electron\\test1.wav")}
    },{
      label: 'hozon', click: () =>{ gen() }
    },{
      label: 'ex', click: () =>{ ex() }
    },{
      label: 'gpt', click: () =>{ gpt() }
    }
  ])
  mainWindow.setMenu(windowMenu) // ウィンドウ上部のメニューを設定
};

// AI設定ウィンドウ
const createAiWindow = (): void => {
  const child = new BrowserWindow({
    parent: mainWindow,
    height: 800,
    width: 800,
    // resizable: false,
    modal: true,

    webPreferences: {
      preload: AI_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })
  // child.webContents.openDevTools();

  child.loadURL(AI_WINDOW_WEBPACK_ENTRY);
  child.setMenu(null) // ウィンドウ上部のメニューを空に設定
}

// アラーム追加、編集ウィンドウ
const createAlermWindow = (): void => {
  const child = new BrowserWindow({
    parent: mainWindow,
    height: 800,
    width: 800,
    modal: true,
    webPreferences: {
      preload: ALERM_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })
  child.webContents.openDevTools();
  // console.log(ALERM_WINDOW_PRELOAD_WEBPACK_ENTRY)
  // console.log(ALERM_WINDOW_WEBPACK_ENTRY)

  child.loadURL(ALERM_WINDOW_WEBPACK_ENTRY)
  child.setMenu(null) // ウィンドウ上部のメニューを空に設定
}





const fullpath = "C:\\Users\\kasum\\MyProjects\\gpt4o\\kopilot\\ts_webpack_electron\\test1.wav";

// 音声再生サンプル
const play =  (fullpath: string) => {
  const player = require('node-wav-player');
  player.play({
    path: fullpath,
  }).then(() => {
    console.log('The wav file started to be played successfully.');
  }).catch((error: any) => {
    console.error(error);
  });
}


// ai音声作成
// テキストを受け取ってvoice apiに送って保存
const prop = {
  text: "",// テキスト
  name: "",// キャラ名、aivoiceでは不使用なparam
  // PresetName:
  voiceName: "",// キャラid "akane_west_emo_48"
  volume: "",// 音量
  speed: "",// 速度
  pitch: "",// 高さ
  pitchRange: "",// 抑揚
  j: "", // 喜び
  a: "", // 怒り
  s: "", // 悲しみ
}
const { download } = require('electron-dl');
const url = 'http://192.168.10.107:8080?text=12345';
const gen = () => {
  console.log(tmp)
  download(
    mainWindow, // electronのwindow
    url, // ダウンロード対象のURL
    {
      directory: 'c:\\Users\\kasum\\Desktop',
      filename: 'tmpfile.wav',
    }
  );
}

// 定期実行
const cron = require('node-cron');
cron.schedule('* * * * *',  () => {
  try {
      // 定期的に実行する処理を書く
      const now = new Date();
      console.log( now.toLocaleString('ja-JP', {timeZone: 'Asia/Tokyo'}))
      play(fullpath)
      //設定ファイル読み込む、時刻が一致するか確認、一致した時刻のディレクトリの設定ファイルを読みこむ、ランダムに音声ファイルを実行
  } catch (error) {
      console.error('Error', error);
  }
});

import { execSync } from 'child_process';

// crystaldisk info実行
const ex = () => {
  // const stdout = execSync('dir')
  // console.log(`${iconv.decode(stdout,"Shift_JIS")}`)
  // console.log(`${iconv.decode(stdout,"utf-8")}`)
  const crystal = execSync('c:\\Program^ Files\\CrystalDiskInfo\\DiskInfo64.exe \/CopyExit')
  console.log(`${iconv.decode(crystal,"Shift_JIS")}`)
}


import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: 'key'
  // apiKey: process.env['OPENAI_API_KEY'], // This is the default and can be omitted
});

// chatgptにメッセージを送る
async function gpt() {
  const chat = await openai.beta.threads.messages.create(
    'key',
    {
      role: "user",
      content: "これはテストメッセージです。適当に回答してください"
    }
  )
  const run = openai.beta.threads.runs.stream('key', {
    assistant_id: 'asst_RUH7F1hhNlwo7rnNPHTIlkjc'
  })
    .on('textCreated', (text) => process.stdout.write('\nassistant > '))
    .on('textDelta', (textDelta, snapshot) => process.stdout.write(textDelta.value))
    .on('toolCallCreated', (toolCall) => process.stdout.write(`\nassistant > ${toolCall.type}\n\n`))
    .on('toolCallDelta', (toolCallDelta, snapshot) => {
      if (toolCallDelta.type === 'code_interpreter') {
        if (toolCallDelta.code_interpreter.input) {
          process.stdout.write(toolCallDelta.code_interpreter.input);
        }
        if (toolCallDelta.code_interpreter.outputs) {
          process.stdout.write("\noutput >\n");
          toolCallDelta.code_interpreter.outputs.forEach(output => {
            if (output.type === "logs") {
              process.stdout.write(`\n${output.logs}\n`);
            }
          });
        }
      }
    });
}
