import { app, BrowserWindow, Menu, nativeImage, Tray, shell, net, ipcMain, clipboard } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string; // メインウィンドウ
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string; // メインウィンドウ プリロード
declare const AI_WINDOW_WEBPACK_ENTRY: string; // AI設定ウィンドウ
declare const AI_WINDOW_PRELOAD_WEBPACK_ENTRY: string; // AI設定ウィンドウ プリロード
declare const ALERM_WINDOW_WEBPACK_ENTRY: string; // アラーム設定ウィンドウ
declare const ALERM_WINDOW_PRELOAD_WEBPACK_ENTRY: string; // アラーム設定ウィンドウ プリロード
// import iconPath from './aka.ico';


// import { execSync } from 'child_process';
import iconv from 'iconv-lite';
import { dialog } from 'electron';
import YAML from 'yaml'


let mainWindow: BrowserWindow;
let request;
let tmp: Buffer;

app.whenReady().then(() => {
  createMainWindow() // 設定ウィンドウを生成（hidden）

  // console.log(iconPath)
  // const img = nativeImage.createFromPath(iconPath) // アイコン読み込み TODO
  const img = nativeImage.createFromPath('aka.ico') // アイコン読み込み TODO
  const tray = new Tray(img)

  const contextMenu = Menu.buildFromTemplate([
    { label: 'kopilotについて', role: 'about' }, // 使い方説明としてgithubリンクも欲しい、もしくはhtml説明書
    { label: '設定', click: () => { mainWindow.show() } }, // 設定画面
    { label: 'リロード', click: () => { mainWindow.show() } }, // TODO
    { label: '終了', click: () => { app.exit() } }, // アプリケーションを完全終了
  ])
  tray.setToolTip('kopilot') // タスクバー上でホバーした時の説明
  tray.setContextMenu(contextMenu)

  // ipcMain.handle('ping', () => 'pong')
})

// このアプリについて
app.setAboutPanelOptions({
  applicationName: 'kopilot',                // アプリ名
  applicationVersion: 'v1.0.0',              // アプリのバージョン
  // copyright: 'Copyright (C) 2020 M.Katsube', // コピーライト
  credits: 'made by ayataka',           // クレジット (Windows,macOS用)
  // iconPath: 'asset/image/icon.png'           // アイコン画像 (Linux,Windows用)
});

// メインウィンドウ
const createMainWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 900,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    show: false, // 起動時は隠した状態でウィンドウを作成
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.on('close', (event) => {
    event.preventDefault(); // submitイベントの本来の動作を止める。closeの動作を止める
    mainWindow.hide(); // バツボタンを押したときに設定ウィンドウを隠す
  });

  const windowMenu = Menu.buildFromTemplate([
    { label: 'ファイル',
      submenu: [
        { label: 'フォルダを開く', click: () => {
            shell.openPath('');//exeのある場所を開く
            }
        },
        { label: 'AI設定', click: () => { createAiWindow() } },
        { label: '終了', click: () => { app.exit() } },
      ]
    },
    { label: '編集',
      submenu: [
        { label: 'アラームを追加', click: () => { createAlermWindow() } },
      ]
    },
    { label: 'ヘルプ',
      submenu: [
        { label: 'このアプリについて', role: 'about' },
        { label: 'webサイト', click: () => { shell.openExternal('https://github.com/a-yataka/kopilot') } },
      ]
    },
    {
      // label: 'aaaa', click: () =>{ mainWindow.webContents.send('control', 'play');}
      label: '')}
    },{
      label: 'hozon', click: () =>{ gen() }
    },{
      label: 'ex', click: () =>{ ex() }
    },{
      label: 'gpt', click: () =>{ gpt() }
    }
  ])

  // ウィンドウにフォーカスするタイミングで設定ファイルをリロードし、描画する
  mainWindow.on('focus',()=>{
    const settings = readSettings('')
    mainWindow.webContents.send('get_settings', settings.schedule)
  })

  // レンダラー側でadd_alermが発火されたらアラーム追加ウィンドウを開く
  ipcMain.on('add_alerm',() => {
    createAlermWindow()
  })

  mainWindow.setMenu(windowMenu) // ウィンドウ上部のメニューを設定
};


// AI設定ウィンドウ
const createAiWindow = (): void => {
  const child = new BrowserWindow({
    parent: mainWindow,
    height: 800,
    width: 800,
    // resizable: false,
    modal: true,

    webPreferences: {
      preload: AI_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })
  // child.webContents.openDevTools();

  child.loadURL(AI_WINDOW_WEBPACK_ENTRY);
  child.setMenu(null) // ウィンドウ上部のメニューを空に設定
}

// アラーム追加、編集ウィンドウ
const createAlermWindow = (): void => {
  const child = new BrowserWindow({
    parent: mainWindow,
    height: 800,
    width: 800,
    modal: true,
    webPreferences: {
      preload: ALERM_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })
  child.webContents.openDevTools();
  // console.log(ALERM_WINDOW_PRELOAD_WEBPACK_ENTRY)
  // console.log(ALERM_WINDOW_WEBPACK_ENTRY)

  child.loadURL(ALERM_WINDOW_WEBPACK_ENTRY)
  child.setMenu(null) // ウィンドウ上部のメニューを空に設定

  // 変更をイベントとして受け取る
  ipcMain.once('ai_inputs',(event, v) => {//onceとonの違いががが
    console.log(v)

    child.close()
  })
}


const fullpath = '';

// 音声再生サンプル
const play =  (fullpath: string) => {
  const player = require('node-wav-player');
  player.play({
    path: fullpath,
  }).then(() => {
    console.log('The wav file started to be played successfully.');
  }).catch((error: any) => {
    console.error(error);
  });
}


// ai音声作成
// テキストを受け取ってvoice apiに送って保存
const prop = {
  text: '',// テキスト
  name: '',// キャラ名、aivoiceでは不使用なparam
  // PresetName:
  voiceName: '',// キャラid 'akane_west_emo_48'
  volume: '',// 音量
  speed: '',// 速度
  pitch: '',// 高さ
  pitchRange: '',// 抑揚
  j: '', // 喜び
  a: '', // 怒り
  s: '', // 悲しみ
}
const { download } = require('electron-dl');
const url = 'http://192.168.10.107:8080?text=12345';
const gen = () => {
  console.log(tmp)
  download(
    mainWindow, // electronのwindow
    url, // ダウンロード対象のURL
    {
      directory: '',
      filename: 'tmpfile.wav',
    }
  );
}

// 定期実行
const cron = require('node-cron');
cron.schedule('* * * * *',  () => {
  try {
      // 定期的に実行する処理を書く
      const now = new Date();
      console.log( now.toLocaleString('ja-JP', {timeZone: 'Asia/Tokyo'}))
      play(fullpath)
      //設定ファイル読み込む、時刻が一致するか確認、一致した時刻のディレクトリの設定ファイルを読みこむ、ランダムに音声ファイルを実行
  } catch (error) {
      console.error('Error', error);
  }
});

import { execSync } from 'child_process';

// crystaldisk info実行
const ex = () => {
  // const stdout = execSync('dir')
  // console.log(`${iconv.decode(stdout,'Shift_JIS')}`)
  // console.log(`${iconv.decode(stdout,'utf-8')}`)
  const crystal = execSync('c:\\Program^ Files\\CrystalDiskInfo\\DiskInfo64.exe \/CopyExit')
  console.log(`${iconv.decode(crystal,'Shift_JIS')}`)
}

import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: 'sk-proj-'
  // apiKey: process.env['OPENAI_API_KEY'], // This is the default and can be omitted
});

// chatgptにメッセージを送る
async function gpt() {
  const chat = await openai.beta.threads.messages.create(
    '',
    {
      role: 'user',
      content: 'これはテストメッセージです。適当に回答してください'
    }
  )
  const run = openai.beta.threads.runs.stream('', {
    assistant_id: ''
  })
  .on('textCreated', (text) => process.stdout.write('\nassistant > '))
  .on('textDelta', (textDelta, snapshot) => process.stdout.write(textDelta.value))
  .on('toolCallCreated', (toolCall) => process.stdout.write(`\nassistant > ${toolCall.type}\n\n`))
  .on('toolCallDelta', (toolCallDelta, snapshot) => {
    if (toolCallDelta.type === 'code_interpreter') {
      if (toolCallDelta.code_interpreter.input) {
        process.stdout.write(toolCallDelta.code_interpreter.input);
      }
      if (toolCallDelta.code_interpreter.outputs) {
        process.stdout.write('\noutput >\n');
        toolCallDelta.code_interpreter.outputs.forEach(output => {
          if (output.type === 'logs') {
            process.stdout.write(`\n${output.logs}\n`);
          }
        });
      }
    }
  });
}

// テキストファイル読み書
import fs from 'fs'
// import * as yaml from 'js-yaml'

// const yamlPath = ''
// const directoryStructure = yaml.load(fs.readFileSync(yamlPath, 'utf8'));

// console.log(directoryStructure);

// const yamlText = yaml.dump(books);
// fs.writeFile('books.yaml', yamlText, 'utf8', (err) => {
//   if (err) {
//     console.error(err.message);
//     process.exit(1);
//   }
//   console.log('Yaml ファイルを保存しました');
// });


// const books = [
//   { name: 'タイトル1', authors: ['著者A', '著者B'] },
//   { name: 'タイトル2', authros: ['著者C', '著者D', '著者D', '著者D'] }
// ];

// const yamlText = yaml.dump(books);
// fs.writeFile('books.yaml', yamlText, 'utf8', (err) => {
//   if (err) {
//     console.error(err.message);
//     process.exit(1);
//   }
//   console.log('Yaml ファイルを保存しました');
// });

// jsonパースして上書きすればなんでもいいや感

// import YAML from 'yaml'
// import path from 'path';
// // const file = fs.readFileSync('')
// const file = fs.readFileSync('')
// const body = YAML.parse(file)

// // console.log(body[1].name)

// const books = [
//   { name: 'タイトル1', authors: ['著者aaaaaaaaA', '著者B'] },
//   { name: 'タイトル2', authros: ['著者cccccccccccccC', '著者D', '著者D', '著者D'] }
// ];

// const yamlText = YAML.stringify(books);
// fs.writeFile('books.yaml', yamlText, 'utf8', (err) => {
//   if (err) {
//     console.error(err.message);
//     process.exit(1);
//   }
//   // console.log('Yaml ファイルを保存しました');
// });



// 設定ファイルの読み込み
const readSettings = (filePath: string): any => {
  const file = fs.readFileSync(filePath, 'utf8')
  return YAML.parse(file)
}

// console.log(readSettings(''))





// TODO 
// const notifier = require('node-notifier');
// const WindowsToaster = require('node-notifier').WindowsToaster;
// const path = require('path');

// var notifier = new WindowsToaster({
//   withFallback: false, // Fallback to Growl or Balloons?
//   customPath: undefined // Relative/Absolute path if you want to use your fork of SnoreToast.exe
// });

// notifier.notify(
//   {
//     title: 'test title', // String. Required
//     message: 'test msg', // String. Required if remove is not defined
//     // icon: undefined, // String. Absolute path to Icon
//     // sound: false, // Bool | String (as defined by http://msdn.microsoft.com/en-us/library/windows/apps/hh761492.aspx)
//     // id: undefined, // Number. ID to use for closing notification.
//     // appID: undefined, // String. App.ID and app Name. Defaults to no value, causing SnoreToast text to be visible.
//     // remove: undefined, // Number. Refer to previously created notification to close.
//     // install: undefined, // String (path, application, app id).  Creates a shortcut <path> in the start menu which point to the executable <application>, appID used for the notifications.
//     tb: true, // 一応反映されたが入力結果が受け取れない？
//   },
//   function(err: any, data: any, meta: any) {
//     // Will also wait until notification is closed.
//     console.log('Waited');
//     console.log(JSON.stringify({ err, data, meta }));
//   }
// );

// notifier.on('click', function(obj: any, options: any, metadata: any) {
//   console.log('User replied', metadata);
// });
// const os = require('os');
// const is64Bit = os.arch() === 'x64';
// const notifier = path.resolve('');
// const localNotifier = (notifier + '-x' + (is64Bit ? '64' : '86') + '.exe');
// const o = execSync(localNotifier)
// console.log(o)
