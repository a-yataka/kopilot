import { app, BrowserWindow, Menu, nativeImage, Tray } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const AI_WINDOW_WEBPACK_ENTRY: string;
declare const ALERM_WINDOW_WEBPACK_ENTRY: string;
// import iconPath from './aka.ico';


import { execSync } from 'child_process';
import iconv from 'iconv-lite';

// // Handle creating/removing shortcuts on Windows when installing/uninstalling.
// if (require('electron-squirrel-startup')) {
//   app.quit();
// }

  // const stdout = execSync('dir')
  // console.log(`${iconv.decode(stdout,"Shift_JIS")}`)
  // console.log(`${iconv.decode(stdout,"utf-8")}`)
  // const crystal = execSync('c:\\Program^ Files\\CrystalDiskInfo\\DiskInfo64.exe \/CopyExit')
  // console.log(`${iconv.decode(crystal,"Shift_JIS")}`)


// const createMainWindow = (): void => {
//   const stdout = execSync('dir')
//   console.log(`${iconv.decode(stdout,"Shift_JIS")}`)
//   console.log(`${iconv.decode(stdout,"utf-8")}`)
//   // const crystal = execSync('c:\\Program^ Files\\CrystalDiskInfo\\DiskInfo64.exe \/CopyExit')
//   // console.log(`${iconv.decode(crystal,"Shift_JIS")}`)

//   // and load the index.html of the app.
//   mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

//   // Open the DevTools.
//   mainWindow.webContents.openDevTools();
// };

// // This method will be called when Electron has finished
// // initialization and is ready to create browser windows.
// // Some APIs can only be used after this event occurs.
// app.on('ready', createMainWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
// app.on('window-all-closed', () => {
//   if (process.platform !== 'darwin') {
//     app.quit();
//   }
// });

// app.on('activate', () => {
//   // On OS X it's common to re-create a window in the app when the
//   // dock icon is clicked and there are no other windows open.
//   if (BrowserWindow.getAllWindows().length === 0) {
//   }
// });
// // In this file you can include the rest of your app's specific main process
// // code. You can also put them in separate files and import them here.

let mainWindow: BrowserWindow;

app.whenReady().then(() => {
  createMainWindow() // 設定ウィンドウを生成（hidden）

  // console.log(iconPath)
  // const img = nativeImage.createFromPath(iconPath) // アイコン読み込み TODO
  const img = nativeImage.createFromPath('aka.ico') // アイコン読み込み TODO
  const tray = new Tray(img)

  const contextMenu = Menu.buildFromTemplate([
    { label: 'kopilotについて', role: 'about' }, // 使い方説明としてgithubリンクも欲しい、もしくはhtml説明書
    { label: '設定', click: () => { mainWindow.show() } }, // 設定画面
    { label: '終了', click: () => { app.exit() } }, // アプリケーションを完全終了
  ])
  tray.setToolTip('kopilot') // タスクバー上でホバーした時の説明
  tray.setContextMenu(contextMenu)
})

// このアプリについて
app.setAboutPanelOptions({
  applicationName: 'kopilot',                // アプリ名
  applicationVersion: 'v1.0.0',              // アプリのバージョン
  // copyright: 'Copyright (C) 2020 M.Katsube', // コピーライト
  credits: 'made by ayataka',           // クレジット (Windows,macOS用)
  // iconPath: 'asset/image/icon.png'           // アイコン画像 (Linux,Windows用)
});

// メインウィンドウ
const createMainWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    show: false, // 起動時は隠した状態でウィンドウを作成
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.on('close', (event) => {
    event.preventDefault(); // submitイベントの本来の動作を止める。closeの動作を止める
    mainWindow.hide(); // バツボタンを押したときに設定ウィンドウを隠す
  });

  const windowMenu = Menu.buildFromTemplate([
    { label: 'ファイル',
      submenu: [
        { label: 'フォルダを開く'},
        { label: 'AI設定', click: () => { createAiWindow() } },
        { label: '終了', click: () => { app.exit() } },
      ]
    },
    { label: '編集',
      submenu: [
        { label: 'アラームを追加'},
      ]
    },
    { label: 'ヘルプ' },
  ])
  mainWindow.setMenu(windowMenu) // ウィンドウ上部のメニューを設定
};

// AI設定ウィンドウ
const createAiWindow = (): void => {
  const child = new BrowserWindow({
    parent: mainWindow,
    height: 400,
    width: 300,
    modal: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })
  child.loadURL(AI_WINDOW_WEBPACK_ENTRY);

  const windowMenu = Menu.buildFromTemplate([]) // メニュー不要なので空配列
  child.setMenu(windowMenu) // ウィンドウ上部のメニューを設定
}

// アラーム追加、編集ウィンドウ
const createAlermWindow = (): void => {
  const child = new BrowserWindow({
    parent: mainWindow,
    height: 400,
    width: 300,
    modal: true,
    // webPreferences: {
    //   preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    // },
  })
  child.loadURL(ALERM_WINDOW_WEBPACK_ENTRY);

  const windowMenu = Menu.buildFromTemplate([]) // メニュー不要なので空配列
  child.setMenu(windowMenu) // ウィンドウ上部のメニューを設定
}